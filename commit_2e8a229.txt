commit 2e8a229251ab968f18657439a5c740cfd89b9440
Author: valevo <valevogelmann@gmail.com>
Date:   Tue May 13 23:20:13 2025 +0200

    fixed issues, enabled cached search

diff --git a/INSTALL.sh b/INSTALL.sh
index d1b1bea..c5bcf18 100755
--- a/INSTALL.sh
+++ b/INSTALL.sh
@@ -11,7 +11,7 @@ echo "INSTALLING SEARCHER FOR DMG..."
 cd ./data
 
 echo "(1 of 3) DOWNLOADING DATA... (this takes up to 30 minutes)"
-./data/DOWNLOAD_DATA.sh
+./DOWNLOAD_DATA.sh
 
 exitCode=$?
 if [ $exitCode -ne 0 ]; then
@@ -20,7 +20,7 @@ if [ $exitCode -ne 0 ]; then
 fi
 
 echo "(2 of 3) EXTRACTING & PROCESSING DATA... (this takes a few minutes)"
-./data/EXTRACT_DATA.sh
+./EXTRACT_DATA.sh
 
 
 echo "(3 of 3) DOWNLOADING IMAGES... (this takes a few hours)"
@@ -29,7 +29,7 @@ echo "BUCKET DETAILS:
     bucket name: dmg-images-searcher
     region: eu-west-2"
 echo "see https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html#configuration"
-./data/DOWNLOAD_IMAGES.sh
+./DOWNLOAD_IMAGES.sh
 
 rm -rf ./backend_venv
 
diff --git a/app.py b/app.py
index d29f8dc..9b33214 100644
--- a/app.py
+++ b/app.py
@@ -14,7 +14,7 @@ import pandas as pd
 
 
 
-from data.data import get_latest, CollectionAccessor, ImageHandler#, EmbeddingSpaceAccessor
+from data.data import CollectionAccessor, ImageHandler#, EmbeddingSpaceAccessor
 
 from search import Search, Randomiser #GraphSearcher, EmbeddingSearcher
 from moon import MOON, Moon
@@ -22,18 +22,22 @@ from moon import MOON, Moon
 
 def init_DMG():
     image_folder = "./data/images/DMG"
-    image_handler = ImageHandler(image_folder=image_folder, keep_prefix=True)
+    image_handler = ImageHandler(image_folder=image_folder, keep_prefix=False)
 
-    dmg_meta = dict(name="Design Museum Gent (public & private)", id_="DMG_2025-05-06",
-                creation_timestamp="2025-05-06")
-    df = CollectionAccessor.get_DMG(pub_path=get_latest("./data/dumps", contains="public"),
-                                     priv_path=get_latest("./data/dumps", contains="private"),
+    time_stamp, pub_file, priv_file = CollectionAccessor.get_latest_dump("./data/dumps")
+
+    
+    dmg_meta = dict(name="Design Museum Gent (public & private)", id_="DMG_"+time_stamp,
+                creation_timestamp=time_stamp)
+    df = CollectionAccessor.get_DMG(pub_path=pub_file, #get_latest("./data/dumps", contains="public"),
+                                     priv_path=priv_file, #get_latest("./data/dumps", contains="private"),
                                      rights_path="./data/rights.csv",
                                      image_handler=image_handler,
                                      **dmg_meta)
     
-    rand = Randomiser(df)
-    s = Search([rand])
+    rand = Randomiser(df, name="Randomiser")
+    rand2 = Randomiser(df, name="Randomiser")
+    s = Search([rand, rand2])
     return df, s
 
 @asynccontextmanager
@@ -119,7 +123,7 @@ def available_models(collection_id):
 
 
 @app.get("/{collection_id}/search")
-def search_collection(collection_id, object_ids=None, concept=None, model_list=None):
+def search_collection(collection_id, object_ids=[], concept=None, model_ids=[]):
     cur_coll = get_collection(collection_id)
 
     if (object_ids is None) or not object_ids or len(object_ids) < 1:
@@ -128,15 +132,19 @@ def search_collection(collection_id, object_ids=None, concept=None, model_list=N
         object_ids = parse_id_list(object_ids)
     cur_records = cur_coll.loc[object_ids]
     cur_search = searches[collection_id]
-    model_list = parse_id_list(model_list) if (model_list is not None) else []  # s = search.turn_into_function(model_list)
+    model_ids = parse_id_list(model_ids) #if (model_ids is not None) else []
+    
+    
+    # s = cur_search.turn_into_function(model_ids)
 
+    # scores = s(cur_records)
     
-    scores = cur_search(cur_records)
+    scores = cur_search(cur_records, model_ids)
 
-    # if is_cached(collection_id, object_ids, concept, model_list):
-    #     return get_cached(collection_id, object_ids, concept, model_list)
+    # if is_cached(collection_id, object_ids, concept, model_ids):
+    #     return get_cached(collection_id, object_ids, concept, model_ids)
         
-    # s = search.turn_into_function(model_list)
+    # s = search.turn_into_function(model_ids)
     
     # object_scores = s(object_ids)
     # concept_scores = concept_search(concept)
@@ -145,11 +153,11 @@ def search_collection(collection_id, object_ids=None, concept=None, model_list=N
 
     # diversify(scores)
 
-    # cache_search(object_ids, concept, model_list, scores)
+    # cache_search(object_ids, concept, model_ids, scores)
     return scores
 
 @app.get("/{collection_id}/search/sample")
-def sample_collection(collection_id, object_ids=None, concept=None, model_list=None, 
+def sample_collection(collection_id, object_ids=None, concept=None, model_ids=None, 
                       k=12, ISO_8601_datetime=None, lat_long_degrees="51.05,3.71"):
     cur_coll = get_collection(collection_id)
     cur_search = searches[collection_id]
@@ -157,20 +165,20 @@ def sample_collection(collection_id, object_ids=None, concept=None, model_list=N
     k = int(k)
 
 
-    scores = search_collection(collection_id, object_ids, concept, model_list)
+    scores = search_collection(collection_id, object_ids, concept, model_ids)
     rand_recs = cur_search.sample(cur_coll, temp=moon_force, size=k)
     return rand_recs.coll.get_presentation_records(as_json=True)
 
 
 
 @app.get("/{collection_id}/search/order")
-def order_collection(collection_id, object_ids=None, concept=None, model_list=None, 
+def order_collection(collection_id, object_ids=None, concept=None, model_ids=None, 
                      skip=None, limit=None, reverse=False, presentation=True):
     cur_coll = get_collection(collection_id)
     cur_search = searches[collection_id]
     reverse = str(reverse).lower() == "true" 
     
-    scores = search_collection(collection_id, object_ids, concept, model_list)
+    scores = search_collection(collection_id, object_ids, concept, model_ids)
     
     ordered = cur_search.order(cur_coll, scores, reverse=reverse)
     if skip: skip = int(skip)
@@ -182,18 +190,18 @@ def order_collection(collection_id, object_ids=None, concept=None, model_list=No
 
 
 @app.get("/{collection_id}/search/order/filter")
-def filter_collection(collection_id, object_ids=None, concept=None, model_list=None, 
+def filter_collection(collection_id, object_ids=None, concept=None, model_ids=None, 
                       filter_text=None, skip=None, limit=None, reverse=False):
     if filter_text is None:
         filter_text = ""
     # cur_coll = get_collection(collection_id)
     # cur_search = searches[collection_id]
 
-    # scores = search_collection(collection_id, object_ids, concept, model_list)
-    ordered = order_collection(collection_id, object_ids, concept, model_list, skip=skip, limit=limit, reverse=reverse, presentation=False)
+    # scores = search_collection(collection_id, object_ids, concept, model_ids)
+    ordered = order_collection(collection_id, object_ids, concept, model_ids, skip=skip, limit=limit, reverse=reverse, presentation=False)
     print(ordered)
-    keep = ordered.coll.filter(filter_text)
-    return ordered[keep.loc[ordered.index]]
+    # keep = ordered.coll.filter(filter_text)
+    return []#ordered[keep.loc[ordered.index]]
 
 
 if __name__ == "__main__":
diff --git a/backend_venv/bin/Activate.ps1 b/backend_venv/bin/Activate.ps1
new file mode 100644
index 0000000..b49d77b
--- /dev/null
+++ b/backend_venv/bin/Activate.ps1
@@ -0,0 +1,247 @@
+<#
+.Synopsis
+Activate a Python virtual environment for the current PowerShell session.
+
+.Description
+Pushes the python executable for a virtual environment to the front of the
+$Env:PATH environment variable and sets the prompt to signify that you are
+in a Python virtual environment. Makes use of the command line switches as
+well as the `pyvenv.cfg` file values present in the virtual environment.
+
+.Parameter VenvDir
+Path to the directory that contains the virtual environment to activate. The
+default value for this is the parent of the directory that the Activate.ps1
+script is located within.
+
+.Parameter Prompt
+The prompt prefix to display when this virtual environment is activated. By
+default, this prompt is the name of the virtual environment folder (VenvDir)
+surrounded by parentheses and followed by a single space (ie. '(.venv) ').
+
+.Example
+Activate.ps1
+Activates the Python virtual environment that contains the Activate.ps1 script.
+
+.Example
+Activate.ps1 -Verbose
+Activates the Python virtual environment that contains the Activate.ps1 script,
+and shows extra information about the activation as it executes.
+
+.Example
+Activate.ps1 -VenvDir C:\Users\MyUser\Common\.venv
+Activates the Python virtual environment located in the specified location.
+
+.Example
+Activate.ps1 -Prompt "MyPython"
+Activates the Python virtual environment that contains the Activate.ps1 script,
+and prefixes the current prompt with the specified string (surrounded in
+parentheses) while the virtual environment is active.
+
+.Notes
+On Windows, it may be required to enable this Activate.ps1 script by setting the
+execution policy for the user. You can do this by issuing the following PowerShell
+command:
+
+PS C:\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
+
+For more information on Execution Policies: 
+https://go.microsoft.com/fwlink/?LinkID=135170
+
+#>
+Param(
+    [Parameter(Mandatory = $false)]
+    [String]
+    $VenvDir,
+    [Parameter(Mandatory = $false)]
+    [String]
+    $Prompt
+)
+
+<# Function declarations --------------------------------------------------- #>
+
+<#
+.Synopsis
+Remove all shell session elements added by the Activate script, including the
+addition of the virtual environment's Python executable from the beginning of
+the PATH variable.
+
+.Parameter NonDestructive
+If present, do not remove this function from the global namespace for the
+session.
+
+#>
+function global:deactivate ([switch]$NonDestructive) {
+    # Revert to original values
+
+    # The prior prompt:
+    if (Test-Path -Path Function:_OLD_VIRTUAL_PROMPT) {
+        Copy-Item -Path Function:_OLD_VIRTUAL_PROMPT -Destination Function:prompt
+        Remove-Item -Path Function:_OLD_VIRTUAL_PROMPT
+    }
+
+    # The prior PYTHONHOME:
+    if (Test-Path -Path Env:_OLD_VIRTUAL_PYTHONHOME) {
+        Copy-Item -Path Env:_OLD_VIRTUAL_PYTHONHOME -Destination Env:PYTHONHOME
+        Remove-Item -Path Env:_OLD_VIRTUAL_PYTHONHOME
+    }
+
+    # The prior PATH:
+    if (Test-Path -Path Env:_OLD_VIRTUAL_PATH) {
+        Copy-Item -Path Env:_OLD_VIRTUAL_PATH -Destination Env:PATH
+        Remove-Item -Path Env:_OLD_VIRTUAL_PATH
+    }
+
+    # Just remove the VIRTUAL_ENV altogether:
+    if (Test-Path -Path Env:VIRTUAL_ENV) {
+        Remove-Item -Path env:VIRTUAL_ENV
+    }
+
+    # Just remove VIRTUAL_ENV_PROMPT altogether.
+    if (Test-Path -Path Env:VIRTUAL_ENV_PROMPT) {
+        Remove-Item -Path env:VIRTUAL_ENV_PROMPT
+    }
+
+    # Just remove the _PYTHON_VENV_PROMPT_PREFIX altogether:
+    if (Get-Variable -Name "_PYTHON_VENV_PROMPT_PREFIX" -ErrorAction SilentlyContinue) {
+        Remove-Variable -Name _PYTHON_VENV_PROMPT_PREFIX -Scope Global -Force
+    }
+
+    # Leave deactivate function in the global namespace if requested:
+    if (-not $NonDestructive) {
+        Remove-Item -Path function:deactivate
+    }
+}
+
+<#
+.Description
+Get-PyVenvConfig parses the values from the pyvenv.cfg file located in the
+given folder, and returns them in a map.
+
+For each line in the pyvenv.cfg file, if that line can be parsed into exactly
+two strings separated by `=` (with any amount of whitespace surrounding the =)
+then it is considered a `key = value` line. The left hand string is the key,
+the right hand is the value.
+
+If the value starts with a `'` or a `"` then the first and last character is
+stripped from the value before being captured.
+
+.Parameter ConfigDir
+Path to the directory that contains the `pyvenv.cfg` file.
+#>
+function Get-PyVenvConfig(
+    [String]
+    $ConfigDir
+) {
+    Write-Verbose "Given ConfigDir=$ConfigDir, obtain values in pyvenv.cfg"
+
+    # Ensure the file exists, and issue a warning if it doesn't (but still allow the function to continue).
+    $pyvenvConfigPath = Join-Path -Resolve -Path $ConfigDir -ChildPath 'pyvenv.cfg' -ErrorAction Continue
+
+    # An empty map will be returned if no config file is found.
+    $pyvenvConfig = @{ }
+
+    if ($pyvenvConfigPath) {
+
+        Write-Verbose "File exists, parse `key = value` lines"
+        $pyvenvConfigContent = Get-Content -Path $pyvenvConfigPath
+
+        $pyvenvConfigContent | ForEach-Object {
+            $keyval = $PSItem -split "\s*=\s*", 2
+            if ($keyval[0] -and $keyval[1]) {
+                $val = $keyval[1]
+
+                # Remove extraneous quotations around a string value.
+                if ("'""".Contains($val.Substring(0, 1))) {
+                    $val = $val.Substring(1, $val.Length - 2)
+                }
+
+                $pyvenvConfig[$keyval[0]] = $val
+                Write-Verbose "Adding Key: '$($keyval[0])'='$val'"
+            }
+        }
+    }
+    return $pyvenvConfig
+}
+
+
+<# Begin Activate script --------------------------------------------------- #>
+
+# Determine the containing directory of this script
+$VenvExecPath = Split-Path -Parent $MyInvocation.MyCommand.Definition
+$VenvExecDir = Get-Item -Path $VenvExecPath
+
+Write-Verbose "Activation script is located in path: '$VenvExecPath'"
+Write-Verbose "VenvExecDir Fullname: '$($VenvExecDir.FullName)"
+Write-Verbose "VenvExecDir Name: '$($VenvExecDir.Name)"
+
+# Set values required in priority: CmdLine, ConfigFile, Default
+# First, get the location of the virtual environment, it might not be
+# VenvExecDir if specified on the command line.
+if ($VenvDir) {
+    Write-Verbose "VenvDir given as parameter, using '$VenvDir' to determine values"
+}
+else {
+    Write-Verbose "VenvDir not given as a parameter, using parent directory name as VenvDir."
+    $VenvDir = $VenvExecDir.Parent.FullName.TrimEnd("\\/")
+    Write-Verbose "VenvDir=$VenvDir"
+}
+
+# Next, read the `pyvenv.cfg` file to determine any required value such
+# as `prompt`.
+$pyvenvCfg = Get-PyVenvConfig -ConfigDir $VenvDir
+
+# Next, set the prompt from the command line, or the config file, or
+# just use the name of the virtual environment folder.
+if ($Prompt) {
+    Write-Verbose "Prompt specified as argument, using '$Prompt'"
+}
+else {
+    Write-Verbose "Prompt not specified as argument to script, checking pyvenv.cfg value"
+    if ($pyvenvCfg -and $pyvenvCfg['prompt']) {
+        Write-Verbose "  Setting based on value in pyvenv.cfg='$($pyvenvCfg['prompt'])'"
+        $Prompt = $pyvenvCfg['prompt'];
+    }
+    else {
+        Write-Verbose "  Setting prompt based on parent's directory's name. (Is the directory name passed to venv module when creating the virtual environment)"
+        Write-Verbose "  Got leaf-name of $VenvDir='$(Split-Path -Path $venvDir -Leaf)'"
+        $Prompt = Split-Path -Path $venvDir -Leaf
+    }
+}
+
+Write-Verbose "Prompt = '$Prompt'"
+Write-Verbose "VenvDir='$VenvDir'"
+
+# Deactivate any currently active virtual environment, but leave the
+# deactivate function in place.
+deactivate -nondestructive
+
+# Now set the environment variable VIRTUAL_ENV, used by many tools to determine
+# that there is an activated venv.
+$env:VIRTUAL_ENV = $VenvDir
+
+if (-not $Env:VIRTUAL_ENV_DISABLE_PROMPT) {
+
+    Write-Verbose "Setting prompt to '$Prompt'"
+
+    # Set the prompt to include the env name
+    # Make sure _OLD_VIRTUAL_PROMPT is global
+    function global:_OLD_VIRTUAL_PROMPT { "" }
+    Copy-Item -Path function:prompt -Destination function:_OLD_VIRTUAL_PROMPT
+    New-Variable -Name _PYTHON_VENV_PROMPT_PREFIX -Description "Python virtual environment prompt prefix" -Scope Global -Option ReadOnly -Visibility Public -Value $Prompt
+
+    function global:prompt {
+        Write-Host -NoNewline -ForegroundColor Green "($_PYTHON_VENV_PROMPT_PREFIX) "
+        _OLD_VIRTUAL_PROMPT
+    }
+    $env:VIRTUAL_ENV_PROMPT = $Prompt
+}
+
+# Clear PYTHONHOME
+if (Test-Path -Path Env:PYTHONHOME) {
+    Copy-Item -Path Env:PYTHONHOME -Destination Env:_OLD_VIRTUAL_PYTHONHOME
+    Remove-Item -Path Env:PYTHONHOME
+}
+
+# Add the venv to the PATH
+Copy-Item -Path Env:PATH -Destination Env:_OLD_VIRTUAL_PATH
+$Env:PATH = "$VenvExecDir$([System.IO.Path]::PathSeparator)$Env:PATH"
diff --git a/backend_venv/bin/activate b/backend_venv/bin/activate
new file mode 100644
index 0000000..f9c8b3f
--- /dev/null
+++ b/backend_venv/bin/activate
@@ -0,0 +1,70 @@
+# This file must be used with "source bin/activate" *from bash*
+# You cannot run it directly
+
+deactivate () {
+    # reset old environment variables
+    if [ -n "${_OLD_VIRTUAL_PATH:-}" ] ; then
+        PATH="${_OLD_VIRTUAL_PATH:-}"
+        export PATH
+        unset _OLD_VIRTUAL_PATH
+    fi
+    if [ -n "${_OLD_VIRTUAL_PYTHONHOME:-}" ] ; then
+        PYTHONHOME="${_OLD_VIRTUAL_PYTHONHOME:-}"
+        export PYTHONHOME
+        unset _OLD_VIRTUAL_PYTHONHOME
+    fi
+
+    # Call hash to forget past commands. Without forgetting
+    # past commands the $PATH changes we made may not be respected
+    hash -r 2> /dev/null
+
+    if [ -n "${_OLD_VIRTUAL_PS1:-}" ] ; then
+        PS1="${_OLD_VIRTUAL_PS1:-}"
+        export PS1
+        unset _OLD_VIRTUAL_PS1
+    fi
+
+    unset VIRTUAL_ENV
+    unset VIRTUAL_ENV_PROMPT
+    if [ ! "${1:-}" = "nondestructive" ] ; then
+    # Self destruct!
+        unset -f deactivate
+    fi
+}
+
+# unset irrelevant variables
+deactivate nondestructive
+
+# on Windows, a path can contain colons and backslashes and has to be converted:
+if [ "${OSTYPE:-}" = "cygwin" ] || [ "${OSTYPE:-}" = "msys" ] ; then
+    # transform D:\path\to\venv to /d/path/to/venv on MSYS
+    # and to /cygdrive/d/path/to/venv on Cygwin
+    export VIRTUAL_ENV=$(cygpath "/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv")
+else
+    # use the path as-is
+    export VIRTUAL_ENV="/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv"
+fi
+
+_OLD_VIRTUAL_PATH="$PATH"
+PATH="$VIRTUAL_ENV/bin:$PATH"
+export PATH
+
+# unset PYTHONHOME if set
+# this will fail if PYTHONHOME is set to the empty string (which is bad anyway)
+# could use `if (set -u; : $PYTHONHOME) ;` in bash
+if [ -n "${PYTHONHOME:-}" ] ; then
+    _OLD_VIRTUAL_PYTHONHOME="${PYTHONHOME:-}"
+    unset PYTHONHOME
+fi
+
+if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT:-}" ] ; then
+    _OLD_VIRTUAL_PS1="${PS1:-}"
+    PS1="(backend_venv) ${PS1:-}"
+    export PS1
+    VIRTUAL_ENV_PROMPT="(backend_venv) "
+    export VIRTUAL_ENV_PROMPT
+fi
+
+# Call hash to forget past commands. Without forgetting
+# past commands the $PATH changes we made may not be respected
+hash -r 2> /dev/null
diff --git a/backend_venv/bin/activate.csh b/backend_venv/bin/activate.csh
new file mode 100644
index 0000000..8dda372
--- /dev/null
+++ b/backend_venv/bin/activate.csh
@@ -0,0 +1,27 @@
+# This file must be used with "source bin/activate.csh" *from csh*.
+# You cannot run it directly.
+
+# Created by Davide Di Blasi <davidedb@gmail.com>.
+# Ported to Python 3.3 venv by Andrew Svetlov <andrew.svetlov@gmail.com>
+
+alias deactivate 'test $?_OLD_VIRTUAL_PATH != 0 && setenv PATH "$_OLD_VIRTUAL_PATH" && unset _OLD_VIRTUAL_PATH; rehash; test $?_OLD_VIRTUAL_PROMPT != 0 && set prompt="$_OLD_VIRTUAL_PROMPT" && unset _OLD_VIRTUAL_PROMPT; unsetenv VIRTUAL_ENV; unsetenv VIRTUAL_ENV_PROMPT; test "\!:*" != "nondestructive" && unalias deactivate'
+
+# Unset irrelevant variables.
+deactivate nondestructive
+
+setenv VIRTUAL_ENV "/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv"
+
+set _OLD_VIRTUAL_PATH="$PATH"
+setenv PATH "$VIRTUAL_ENV/bin:$PATH"
+
+
+set _OLD_VIRTUAL_PROMPT="$prompt"
+
+if (! "$?VIRTUAL_ENV_DISABLE_PROMPT") then
+    set prompt = "(backend_venv) $prompt"
+    setenv VIRTUAL_ENV_PROMPT "(backend_venv) "
+endif
+
+alias pydoc python -m pydoc
+
+rehash
diff --git a/backend_venv/bin/activate.fish b/backend_venv/bin/activate.fish
new file mode 100644
index 0000000..824216c
--- /dev/null
+++ b/backend_venv/bin/activate.fish
@@ -0,0 +1,69 @@
+# This file must be used with "source <venv>/bin/activate.fish" *from fish*
+# (https://fishshell.com/). You cannot run it directly.
+
+function deactivate  -d "Exit virtual environment and return to normal shell environment"
+    # reset old environment variables
+    if test -n "$_OLD_VIRTUAL_PATH"
+        set -gx PATH $_OLD_VIRTUAL_PATH
+        set -e _OLD_VIRTUAL_PATH
+    end
+    if test -n "$_OLD_VIRTUAL_PYTHONHOME"
+        set -gx PYTHONHOME $_OLD_VIRTUAL_PYTHONHOME
+        set -e _OLD_VIRTUAL_PYTHONHOME
+    end
+
+    if test -n "$_OLD_FISH_PROMPT_OVERRIDE"
+        set -e _OLD_FISH_PROMPT_OVERRIDE
+        # prevents error when using nested fish instances (Issue #93858)
+        if functions -q _old_fish_prompt
+            functions -e fish_prompt
+            functions -c _old_fish_prompt fish_prompt
+            functions -e _old_fish_prompt
+        end
+    end
+
+    set -e VIRTUAL_ENV
+    set -e VIRTUAL_ENV_PROMPT
+    if test "$argv[1]" != "nondestructive"
+        # Self-destruct!
+        functions -e deactivate
+    end
+end
+
+# Unset irrelevant variables.
+deactivate nondestructive
+
+set -gx VIRTUAL_ENV "/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv"
+
+set -gx _OLD_VIRTUAL_PATH $PATH
+set -gx PATH "$VIRTUAL_ENV/bin" $PATH
+
+# Unset PYTHONHOME if set.
+if set -q PYTHONHOME
+    set -gx _OLD_VIRTUAL_PYTHONHOME $PYTHONHOME
+    set -e PYTHONHOME
+end
+
+if test -z "$VIRTUAL_ENV_DISABLE_PROMPT"
+    # fish uses a function instead of an env var to generate the prompt.
+
+    # Save the current fish_prompt function as the function _old_fish_prompt.
+    functions -c fish_prompt _old_fish_prompt
+
+    # With the original prompt function renamed, we can override with our own.
+    function fish_prompt
+        # Save the return status of the last command.
+        set -l old_status $status
+
+        # Output the venv prompt; color taken from the blue of the Python logo.
+        printf "%s%s%s" (set_color 4B8BBE) "(backend_venv) " (set_color normal)
+
+        # Restore the return status of the previous command.
+        echo "exit $old_status" | .
+        # Output the original/"old" prompt.
+        _old_fish_prompt
+    end
+
+    set -gx _OLD_FISH_PROMPT_OVERRIDE "$VIRTUAL_ENV"
+    set -gx VIRTUAL_ENV_PROMPT "(backend_venv) "
+end
diff --git a/backend_venv/bin/csv2rdf b/backend_venv/bin/csv2rdf
new file mode 100755
index 0000000..dac08d7
--- /dev/null
+++ b/backend_venv/bin/csv2rdf
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from rdflib.tools.csv2rdf import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/f2py b/backend_venv/bin/f2py
new file mode 100755
index 0000000..ba8ddb3
--- /dev/null
+++ b/backend_venv/bin/f2py
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from numpy.f2py.f2py2e import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/fastapi b/backend_venv/bin/fastapi
new file mode 100755
index 0000000..94918ab
--- /dev/null
+++ b/backend_venv/bin/fastapi
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from fastapi.cli import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/fonttools b/backend_venv/bin/fonttools
new file mode 100755
index 0000000..7a02735
--- /dev/null
+++ b/backend_venv/bin/fonttools
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from fontTools.__main__ import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/huggingface-cli b/backend_venv/bin/huggingface-cli
new file mode 100755
index 0000000..da368bb
--- /dev/null
+++ b/backend_venv/bin/huggingface-cli
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from huggingface_hub.commands.huggingface_cli import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/imageio_download_bin b/backend_venv/bin/imageio_download_bin
new file mode 100755
index 0000000..8cabad6
--- /dev/null
+++ b/backend_venv/bin/imageio_download_bin
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from imageio.__main__ import download_bin_main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(download_bin_main())
diff --git a/backend_venv/bin/imageio_remove_bin b/backend_venv/bin/imageio_remove_bin
new file mode 100755
index 0000000..4e8fd5e
--- /dev/null
+++ b/backend_venv/bin/imageio_remove_bin
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from imageio.__main__ import remove_bin_main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(remove_bin_main())
diff --git a/backend_venv/bin/isympy b/backend_venv/bin/isympy
new file mode 100755
index 0000000..9e36c19
--- /dev/null
+++ b/backend_venv/bin/isympy
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from isympy import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/jp.py b/backend_venv/bin/jp.py
new file mode 100755
index 0000000..e6c1b70
--- /dev/null
+++ b/backend_venv/bin/jp.py
@@ -0,0 +1,54 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+
+import sys
+import json
+import argparse
+from pprint import pformat
+
+import jmespath
+from jmespath import exceptions
+
+
+def main():
+    parser = argparse.ArgumentParser()
+    parser.add_argument('expression')
+    parser.add_argument('-f', '--filename',
+                        help=('The filename containing the input data.  '
+                              'If a filename is not given then data is '
+                              'read from stdin.'))
+    parser.add_argument('--ast', action='store_true',
+                        help=('Pretty print the AST, do not search the data.'))
+    args = parser.parse_args()
+    expression = args.expression
+    if args.ast:
+        # Only print the AST
+        expression = jmespath.compile(args.expression)
+        sys.stdout.write(pformat(expression.parsed))
+        sys.stdout.write('\n')
+        return 0
+    if args.filename:
+        with open(args.filename, 'r') as f:
+            data = json.load(f)
+    else:
+        data = sys.stdin.read()
+        data = json.loads(data)
+    try:
+        sys.stdout.write(json.dumps(
+            jmespath.search(expression, data), indent=4, ensure_ascii=False))
+        sys.stdout.write('\n')
+    except exceptions.ArityError as e:
+        sys.stderr.write("invalid-arity: %s\n" % e)
+        return 1
+    except exceptions.JMESPathTypeError as e:
+        sys.stderr.write("invalid-type: %s\n" % e)
+        return 1
+    except exceptions.UnknownFunctionError as e:
+        sys.stderr.write("unknown-function: %s\n" % e)
+        return 1
+    except exceptions.ParseError as e:
+        sys.stderr.write("syntax-error: %s\n" % e)
+        return 1
+
+
+if __name__ == '__main__':
+    sys.exit(main())
diff --git a/backend_venv/bin/normalizer b/backend_venv/bin/normalizer
new file mode 100755
index 0000000..821a23d
--- /dev/null
+++ b/backend_venv/bin/normalizer
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from charset_normalizer import cli
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(cli.cli_detect())
diff --git a/backend_venv/bin/pip b/backend_venv/bin/pip
new file mode 100755
index 0000000..4d612a6
--- /dev/null
+++ b/backend_venv/bin/pip
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from pip._internal.cli.main import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/pip3 b/backend_venv/bin/pip3
new file mode 100755
index 0000000..4d612a6
--- /dev/null
+++ b/backend_venv/bin/pip3
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from pip._internal.cli.main import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/pip3.12 b/backend_venv/bin/pip3.12
new file mode 100755
index 0000000..4d612a6
--- /dev/null
+++ b/backend_venv/bin/pip3.12
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from pip._internal.cli.main import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/proton b/backend_venv/bin/proton
new file mode 100755
index 0000000..db6bccf
--- /dev/null
+++ b/backend_venv/bin/proton
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from triton.profiler.proton import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/proton-viewer b/backend_venv/bin/proton-viewer
new file mode 100755
index 0000000..0e1e533
--- /dev/null
+++ b/backend_venv/bin/proton-viewer
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from triton.profiler.viewer import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/pyftmerge b/backend_venv/bin/pyftmerge
new file mode 100755
index 0000000..bd8682b
--- /dev/null
+++ b/backend_venv/bin/pyftmerge
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from fontTools.merge import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/pyftsubset b/backend_venv/bin/pyftsubset
new file mode 100755
index 0000000..f29c3d0
--- /dev/null
+++ b/backend_venv/bin/pyftsubset
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from fontTools.subset import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/python b/backend_venv/bin/python
new file mode 120000
index 0000000..11b9d88
--- /dev/null
+++ b/backend_venv/bin/python
@@ -0,0 +1 @@
+python3.12
\ No newline at end of file
diff --git a/backend_venv/bin/python3 b/backend_venv/bin/python3
new file mode 120000
index 0000000..11b9d88
--- /dev/null
+++ b/backend_venv/bin/python3
@@ -0,0 +1 @@
+python3.12
\ No newline at end of file
diff --git a/backend_venv/bin/python3.12 b/backend_venv/bin/python3.12
new file mode 120000
index 0000000..dc92e12
--- /dev/null
+++ b/backend_venv/bin/python3.12
@@ -0,0 +1 @@
+/usr/bin/python3.12
\ No newline at end of file
diff --git a/backend_venv/bin/rdf2dot b/backend_venv/bin/rdf2dot
new file mode 100755
index 0000000..363b71c
--- /dev/null
+++ b/backend_venv/bin/rdf2dot
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from rdflib.tools.rdf2dot import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/rdfgraphisomorphism b/backend_venv/bin/rdfgraphisomorphism
new file mode 100755
index 0000000..a5111dc
--- /dev/null
+++ b/backend_venv/bin/rdfgraphisomorphism
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from rdflib.tools.graphisomorphism import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/rdfpipe b/backend_venv/bin/rdfpipe
new file mode 100755
index 0000000..bc657b5
--- /dev/null
+++ b/backend_venv/bin/rdfpipe
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from rdflib.tools.rdfpipe import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/rdfs2dot b/backend_venv/bin/rdfs2dot
new file mode 100755
index 0000000..09d5b75
--- /dev/null
+++ b/backend_venv/bin/rdfs2dot
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from rdflib.tools.rdfs2dot import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/torchfrtrace b/backend_venv/bin/torchfrtrace
new file mode 100755
index 0000000..2111020
--- /dev/null
+++ b/backend_venv/bin/torchfrtrace
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from tools.flight_recorder.fr_trace import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/torchrun b/backend_venv/bin/torchrun
new file mode 100755
index 0000000..303f4fc
--- /dev/null
+++ b/backend_venv/bin/torchrun
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from torch.distributed.run import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/tqdm b/backend_venv/bin/tqdm
new file mode 100755
index 0000000..ce48fc2
--- /dev/null
+++ b/backend_venv/bin/tqdm
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from tqdm.cli import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/transformers-cli b/backend_venv/bin/transformers-cli
new file mode 100755
index 0000000..fd5bba5
--- /dev/null
+++ b/backend_venv/bin/transformers-cli
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from transformers.commands.transformers_cli import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/ttx b/backend_venv/bin/ttx
new file mode 100755
index 0000000..7b18de7
--- /dev/null
+++ b/backend_venv/bin/ttx
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from fontTools.ttx import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/bin/uvicorn b/backend_venv/bin/uvicorn
new file mode 100755
index 0000000..ade6c72
--- /dev/null
+++ b/backend_venv/bin/uvicorn
@@ -0,0 +1,8 @@
+#!/home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv/bin/python3.12
+# -*- coding: utf-8 -*-
+import re
+import sys
+from uvicorn.main import main
+if __name__ == '__main__':
+    sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
+    sys.exit(main())
diff --git a/backend_venv/lib64 b/backend_venv/lib64
new file mode 120000
index 0000000..7951405
--- /dev/null
+++ b/backend_venv/lib64
@@ -0,0 +1 @@
+lib
\ No newline at end of file
diff --git a/backend_venv/pyvenv.cfg b/backend_venv/pyvenv.cfg
new file mode 100644
index 0000000..00c9824
--- /dev/null
+++ b/backend_venv/pyvenv.cfg
@@ -0,0 +1,5 @@
+home = /usr/bin
+include-system-site-packages = false
+version = 3.12.7
+executable = /usr/bin/python3.12
+command = /home/valentin/home2-env/bin/python -m venv /home/valentin/Desktop/SerendipitySearch/searcher_backend/web_backend/backend_venv
diff --git a/backend_venv/share/man/man1/isympy.1 b/backend_venv/share/man/man1/isympy.1
new file mode 100644
index 0000000..0ff9661
--- /dev/null
+++ b/backend_venv/share/man/man1/isympy.1
@@ -0,0 +1,188 @@
+'\" -*- coding: us-ascii -*-
+.if \n(.g .ds T< \\FC
+.if \n(.g .ds T> \\F[\n[.fam]]
+.de URL
+\\$2 \(la\\$1\(ra\\$3
+..
+.if \n(.g .mso www.tmac
+.TH isympy 1 2007-10-8 "" ""
+.SH NAME
+isympy \- interactive shell for SymPy
+.SH SYNOPSIS
+'nh
+.fi
+.ad l
+\fBisympy\fR \kx
+.if (\nx>(\n(.l/2)) .nr x (\n(.l/5)
+'in \n(.iu+\nxu
+[\fB-c\fR | \fB--console\fR] [\fB-p\fR ENCODING | \fB--pretty\fR ENCODING] [\fB-t\fR TYPE | \fB--types\fR TYPE] [\fB-o\fR ORDER | \fB--order\fR ORDER] [\fB-q\fR | \fB--quiet\fR] [\fB-d\fR | \fB--doctest\fR] [\fB-C\fR | \fB--no-cache\fR] [\fB-a\fR | \fB--auto\fR] [\fB-D\fR | \fB--debug\fR] [
+-- | PYTHONOPTIONS]
+'in \n(.iu-\nxu
+.ad b
+'hy
+'nh
+.fi
+.ad l
+\fBisympy\fR \kx
+.if (\nx>(\n(.l/2)) .nr x (\n(.l/5)
+'in \n(.iu+\nxu
+[
+{\fB-h\fR | \fB--help\fR}
+|
+{\fB-v\fR | \fB--version\fR}
+]
+'in \n(.iu-\nxu
+.ad b
+'hy
+.SH DESCRIPTION
+isympy is a Python shell for SymPy. It is just a normal python shell
+(ipython shell if you have the ipython package installed) that executes
+the following commands so that you don't have to:
+.PP
+.nf
+\*(T<
+>>> from __future__ import division
+>>> from sympy import *
+>>> x, y, z = symbols("x,y,z")
+>>> k, m, n = symbols("k,m,n", integer=True)
+    \*(T>
+.fi
+.PP
+So starting isympy is equivalent to starting python (or ipython) and
+executing the above commands by hand. It is intended for easy and quick
+experimentation with SymPy. For more complicated programs, it is recommended
+to write a script and import things explicitly (using the "from sympy
+import sin, log, Symbol, ..." idiom).
+.SH OPTIONS
+.TP
+\*(T<\fB\-c \fR\*(T>\fISHELL\fR, \*(T<\fB\-\-console=\fR\*(T>\fISHELL\fR
+Use the specified shell (python or ipython) as
+console backend instead of the default one (ipython
+if present or python otherwise).
+
+Example: isympy -c python
+
+\fISHELL\fR could be either
+\&'ipython' or 'python'
+.TP
+\*(T<\fB\-p \fR\*(T>\fIENCODING\fR, \*(T<\fB\-\-pretty=\fR\*(T>\fIENCODING\fR
+Setup pretty printing in SymPy. By default, the most pretty, unicode
+printing is enabled (if the terminal supports it). You can use less
+pretty ASCII printing instead or no pretty printing at all.
+
+Example: isympy -p no
+
+\fIENCODING\fR must be one of 'unicode',
+\&'ascii' or 'no'.
+.TP
+\*(T<\fB\-t \fR\*(T>\fITYPE\fR, \*(T<\fB\-\-types=\fR\*(T>\fITYPE\fR
+Setup the ground types for the polys. By default, gmpy ground types
+are used if gmpy2 or gmpy is installed, otherwise it falls back to python
+ground types, which are a little bit slower. You can manually
+choose python ground types even if gmpy is installed (e.g., for testing purposes).
+
+Note that sympy ground types are not supported, and should be used
+only for experimental purposes.
+
+Note that the gmpy1 ground type is primarily intended for testing; it the
+use of gmpy even if gmpy2 is available.
+
+This is the same as setting the environment variable
+SYMPY_GROUND_TYPES to the given ground type (e.g.,
+SYMPY_GROUND_TYPES='gmpy')
+
+The ground types can be determined interactively from the variable
+sympy.polys.domains.GROUND_TYPES inside the isympy shell itself.
+
+Example: isympy -t python
+
+\fITYPE\fR must be one of 'gmpy',
+\&'gmpy1' or 'python'.
+.TP
+\*(T<\fB\-o \fR\*(T>\fIORDER\fR, \*(T<\fB\-\-order=\fR\*(T>\fIORDER\fR
+Setup the ordering of terms for printing. The default is lex, which
+orders terms lexicographically (e.g., x**2 + x + 1). You can choose
+other orderings, such as rev-lex, which will use reverse
+lexicographic ordering (e.g., 1 + x + x**2).
+
+Note that for very large expressions, ORDER='none' may speed up
+printing considerably, with the tradeoff that the order of the terms
+in the printed expression will have no canonical order
+
+Example: isympy -o rev-lax
+
+\fIORDER\fR must be one of 'lex', 'rev-lex', 'grlex',
+\&'rev-grlex', 'grevlex', 'rev-grevlex', 'old', or 'none'.
+.TP
+\*(T<\fB\-q\fR\*(T>, \*(T<\fB\-\-quiet\fR\*(T>
+Print only Python's and SymPy's versions to stdout at startup, and nothing else.
+.TP
+\*(T<\fB\-d\fR\*(T>, \*(T<\fB\-\-doctest\fR\*(T>
+Use the same format that should be used for doctests. This is
+equivalent to '\fIisympy -c python -p no\fR'.
+.TP
+\*(T<\fB\-C\fR\*(T>, \*(T<\fB\-\-no\-cache\fR\*(T>
+Disable the caching mechanism. Disabling the cache may slow certain
+operations down considerably. This is useful for testing the cache,
+or for benchmarking, as the cache can result in deceptive benchmark timings.
+
+This is the same as setting the environment variable SYMPY_USE_CACHE
+to 'no'.
+.TP
+\*(T<\fB\-a\fR\*(T>, \*(T<\fB\-\-auto\fR\*(T>
+Automatically create missing symbols. Normally, typing a name of a
+Symbol that has not been instantiated first would raise NameError,
+but with this option enabled, any undefined name will be
+automatically created as a Symbol. This only works in IPython 0.11.
+
+Note that this is intended only for interactive, calculator style
+usage. In a script that uses SymPy, Symbols should be instantiated
+at the top, so that it's clear what they are.
+
+This will not override any names that are already defined, which
+includes the single character letters represented by the mnemonic
+QCOSINE (see the "Gotchas and Pitfalls" document in the
+documentation). You can delete existing names by executing "del
+name" in the shell itself. You can see if a name is defined by typing
+"'name' in globals()".
+
+The Symbols that are created using this have default assumptions.
+If you want to place assumptions on symbols, you should create them
+using symbols() or var().
+
+Finally, this only works in the top level namespace. So, for
+example, if you define a function in isympy with an undefined
+Symbol, it will not work.
+.TP
+\*(T<\fB\-D\fR\*(T>, \*(T<\fB\-\-debug\fR\*(T>
+Enable debugging output. This is the same as setting the
+environment variable SYMPY_DEBUG to 'True'. The debug status is set
+in the variable SYMPY_DEBUG within isympy.
+.TP
+-- \fIPYTHONOPTIONS\fR
+These options will be passed on to \fIipython (1)\fR shell.
+Only supported when ipython is being used (standard python shell not supported).
+
+Two dashes (--) are required to separate \fIPYTHONOPTIONS\fR
+from the other isympy options.
+
+For example, to run iSymPy without startup banner and colors:
+
+isympy -q -c ipython -- --colors=NoColor
+.TP
+\*(T<\fB\-h\fR\*(T>, \*(T<\fB\-\-help\fR\*(T>
+Print help output and exit.
+.TP
+\*(T<\fB\-v\fR\*(T>, \*(T<\fB\-\-version\fR\*(T>
+Print isympy version information and exit.
+.SH FILES
+.TP
+\*(T<\fI${HOME}/.sympy\-history\fR\*(T>
+Saves the history of commands when using the python
+shell as backend.
+.SH BUGS
+The upstreams BTS can be found at \(lahttps://github.com/sympy/sympy/issues\(ra
+Please report all bugs that you find in there, this will help improve
+the overall quality of SymPy.
+.SH "SEE ALSO"
+\fBipython\fR(1), \fBpython\fR(1)
diff --git a/backend_venv/share/man/man1/ttx.1 b/backend_venv/share/man/man1/ttx.1
new file mode 100644
index 0000000..bba23b5
--- /dev/null
+++ b/backend_venv/share/man/man1/ttx.1
@@ -0,0 +1,225 @@
+.Dd May 18, 2004
+.\" ttx is not specific to any OS, but contrary to what groff_mdoc(7)
+.\" seems to imply, entirely omitting the .Os macro causes 'BSD' to
+.\" be used, so I give a zero-width space as its argument.
+.Os \&
+.\" The "FontTools Manual" argument apparently has no effect in
+.\" groff 1.18.1. I think it is a bug in the -mdoc groff package.
+.Dt TTX 1 "FontTools Manual"
+.Sh NAME
+.Nm ttx
+.Nd tool for manipulating TrueType and OpenType fonts
+.Sh SYNOPSIS
+.Nm
+.Bk
+.Op Ar option ...
+.Ek
+.Bk
+.Ar file ...
+.Ek
+.Sh DESCRIPTION
+.Nm
+is a tool for manipulating TrueType and OpenType fonts.  It can convert
+TrueType and OpenType fonts to and from an
+.Tn XML Ns -based format called
+.Tn TTX .
+.Tn TTX
+files have a
+.Ql .ttx
+extension.
+.Pp
+For each
+.Ar file
+argument it is given,
+.Nm
+detects whether it is a
+.Ql .ttf ,
+.Ql .otf
+or
+.Ql .ttx
+file and acts accordingly: if it is a
+.Ql .ttf
+or
+.Ql .otf
+file, it generates a
+.Ql .ttx
+file; if it is a
+.Ql .ttx
+file, it generates a
+.Ql .ttf
+or
+.Ql .otf
+file.
+.Pp
+By default, every output file is created in the same directory as the
+corresponding input file and with the same name except for the
+extension, which is substituted appropriately.
+.Nm
+never overwrites existing files; if necessary, it appends a suffix to
+the output file name before the extension, as in
+.Pa Arial#1.ttf .
+.Ss "General options"
+.Bl -tag -width ".Fl t Ar table"
+.It Fl h
+Display usage information.
+.It Fl d Ar dir
+Write the output files to directory
+.Ar dir
+instead of writing every output file to the same directory as the
+corresponding input file.
+.It Fl o Ar file
+Write the output to
+.Ar file
+instead of writing it to the same directory as the
+corresponding input file.
+.It Fl v
+Be verbose.  Write more messages to the standard output describing what
+is being done.
+.It Fl a
+Allow virtual glyphs ID's on compile or decompile.
+.El
+.Ss "Dump options"
+The following options control the process of dumping font files
+(TrueType or OpenType) to
+.Tn TTX
+files.
+.Bl -tag -width ".Fl t Ar table"
+.It Fl l
+List table information.  Instead of dumping the font to a
+.Tn TTX
+file, display minimal information about each table.
+.It Fl t Ar table
+Dump table
+.Ar table .
+This option may be given multiple times to dump several tables at
+once.  When not specified, all tables are dumped.
+.It Fl x Ar table
+Exclude table
+.Ar table
+from the list of tables to dump.  This option may be given multiple
+times to exclude several tables from the dump.  The
+.Fl t
+and
+.Fl x
+options are mutually exclusive.
+.It Fl s
+Split tables.  Dump each table to a separate
+.Tn TTX
+file and write (under the name that would have been used for the output
+file if the
+.Fl s
+option had not been given) one small
+.Tn TTX
+file containing references to the individual table dump files.  This
+file can be used as input to
+.Nm
+as long as the referenced files can be found in the same directory.
+.It Fl i
+.\" XXX: I suppose OpenType programs (exist and) are also affected.
+Don't disassemble TrueType instructions.  When this option is specified,
+all TrueType programs (glyph programs, the font program and the
+pre-program) are written to the
+.Tn TTX
+file as hexadecimal data instead of
+assembly.  This saves some time and results in smaller
+.Tn TTX
+files.
+.It Fl y Ar n
+When decompiling a TrueType Collection (TTC) file,
+decompile font number
+.Ar n ,
+starting from 0.
+.El
+.Ss "Compilation options"
+The following options control the process of compiling
+.Tn TTX
+files into font files (TrueType or OpenType):
+.Bl -tag -width ".Fl t Ar table"
+.It Fl m Ar fontfile
+Merge the input
+.Tn TTX
+file
+.Ar file
+with
+.Ar fontfile .
+No more than one
+.Ar file
+argument can be specified when this option is used.
+.It Fl b
+Don't recalculate glyph bounding boxes.  Use the values in the
+.Tn TTX
+file as is.
+.El
+.Sh "THE TTX FILE FORMAT"
+You can find some information about the
+.Tn TTX
+file format in
+.Pa documentation.html .
+In particular, you will find in that file the list of tables understood by
+.Nm
+and the relations between TrueType GlyphIDs and the glyph names used in
+.Tn TTX
+files.
+.Sh EXAMPLES
+In the following examples, all files are read from and written to the
+current directory.  Additionally, the name given for the output file
+assumes in every case that it did not exist before
+.Nm
+was invoked.
+.Pp
+Dump the TrueType font contained in
+.Pa FreeSans.ttf
+to
+.Pa FreeSans.ttx :
+.Pp
+.Dl ttx FreeSans.ttf
+.Pp
+Compile
+.Pa MyFont.ttx
+into a TrueType or OpenType font file:
+.Pp
+.Dl ttx MyFont.ttx
+.Pp
+List the tables in
+.Pa FreeSans.ttf
+along with some information:
+.Pp
+.Dl ttx -l FreeSans.ttf
+.Pp
+Dump the
+.Sq cmap
+table from
+.Pa FreeSans.ttf
+to
+.Pa FreeSans.ttx :
+.Pp
+.Dl ttx -t cmap FreeSans.ttf
+.Sh NOTES
+On MS\-Windows and MacOS,
+.Nm
+is available as a graphical application to which files can be dropped.
+.Sh SEE ALSO
+.Pa documentation.html
+.Pp
+.Xr fontforge 1 ,
+.Xr ftinfo 1 ,
+.Xr gfontview 1 ,
+.Xr xmbdfed 1 ,
+.Xr Font::TTF 3pm
+.Sh AUTHORS
+.Nm
+was written by
+.An -nosplit
+.An "Just van Rossum" Aq just@letterror.com .
+.Pp
+This manual page was written by
+.An "Florent Rougon" Aq f.rougon@free.fr
+for the Debian GNU/Linux system based on the existing FontTools
+documentation.  It may be freely used, modified and distributed without
+restrictions.
+.\" For Emacs:
+.\" Local Variables:
+.\" fill-column: 72
+.\" sentence-end: "[.?!][]\"')}]*\\($\\| $\\|   \\|  \\)[   \n]*"
+.\" sentence-end-double-space: t
+.\" End:
\ No newline at end of file
diff --git a/data/EXTRACT_DATA.sh b/data/EXTRACT_DATA.sh
index 0522535..81d9fa2 100755
--- a/data/EXTRACT_DATA.sh
+++ b/data/EXTRACT_DATA.sh
@@ -8,4 +8,8 @@ data_dir="./dumps"
 
 python ./src/extract_data.py --file "$data_dir/API_dump_public_$today.json" --is_public
 
+rm TEMP_extract_data.json
+
 python ./src/extract_data.py --file "$data_dir/API_dump_private_$today.json"
+
+rm TEMP_extract_data.json
diff --git a/data/data.py b/data/data.py
index d6600d3..d8073f7 100644
--- a/data/data.py
+++ b/data/data.py
@@ -11,10 +11,10 @@ import datetime as dt
 from edtf import parse_edtf
 
 
-def get_latest(directory, contains=""):
-    files = [f for f in sorted(glob(directory+"/*")) if contains in f]
-    if not files: raise ValueError(f"{directory} contains no files with substring {contains}")
-    return files[-1]
+# def get_latest(directory, contains=""):
+#     files = [f for f in sorted(glob(directory+"/*")) if contains in f]
+#     if not files: raise ValueError(f"{directory} contains no files with substring {contains}")
+#     return files[-1]
 
 # as documented here: https://pandas.pydata.org/docs/development/extending.html
 @pd.api.extensions.register_dataframe_accessor("emb_space")
@@ -154,6 +154,18 @@ class CollectionAccessor:
             return cls.parsed_dates_memo[date]
         return series.progress_apply(memoised)
 
+    @staticmethod
+    def get_latest_dump(directory):
+        public = sorted(glob(directory+ "/*_public_*.json"))[-1]
+        private = sorted(glob(directory+ "/*_private_*.json"))[-1]
+        print(public, private)
+        time_stamp = re.match(".*/API_dump_public_(.+).json", public).group(1)
+        return time_stamp, public.replace(".json", "_extracted.csv"), private.replace(".json", "_extracted.csv")
+
+    # @staticmethod
+    # def metadata_from_file(f):
+        
+        
         
     
     @classmethod
@@ -164,16 +176,18 @@ class CollectionAccessor:
 
         df = pd.concat([pub, priv.loc[priv.index.difference(pub.index)]])
         df = df.join(rights)
+
         
         df = df.join(image_handler._obj, how="left")
-        
+
 
         assert ("name" in metadata) and ("id_" in metadata) and ("creation_timestamp" in metadata)
         df.attrs = metadata
 
         ### PARSING
         df = df.apply(cls.parse_lists)
-        
+
+
         ### TIME STUFF
         df[cls.time_cols] = df[cls.time_cols].replace({"/": None, "..": None})#.fillna(None)
         ### REMOVE: PART OF EXTRACTION
diff --git a/data/dumps/API_dump_private_2025-05-06_extracted.csv b/data/dumps/API_dump_private_2025-05-13_extracted.csv
similarity index 100%
rename from data/dumps/API_dump_private_2025-05-06_extracted.csv
rename to data/dumps/API_dump_private_2025-05-13_extracted.csv
diff --git a/data/dumps/API_dump_public_2025-05-06_extracted.csv b/data/dumps/API_dump_public_2025-05-13_extracted.csv
similarity index 100%
rename from data/dumps/API_dump_public_2025-05-06_extracted.csv
rename to data/dumps/API_dump_public_2025-05-13_extracted.csv
diff --git a/data/src/extract_data.py b/data/src/extract_data.py
index e423a3b..0656381 100644
--- a/data/src/extract_data.py
+++ b/data/src/extract_data.py
@@ -130,3 +130,4 @@ if __name__ == "__main__":
     # # this_minute = dt.datetime.today().strftime("%Y-%m-%dT%H-%M")
     imploded.to_csv(save_name, index=False, quoting=csv.QUOTE_ALL, quotechar='"')
     # imploded.to_parquet(save_name, index=False, compression=None)
+
diff --git a/dev.ipynb b/dev.ipynb
index 18e82a0..b8fc8b9 100644
--- a/dev.ipynb
+++ b/dev.ipynb
@@ -5,16 +5,7 @@
    "execution_count": 1,
    "id": "fea07788-79e9-4363-843c-6c31682a9132",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/home/valentin/home2-env/lib/python3.12/site-packages/sentence_transformers/cross_encoder/CrossEncoder.py:13: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
-      "  from tqdm.autonotebook import tqdm, trange\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "from tqdm import tqdm\n",
     "tqdm.pandas()\n",
@@ -28,7 +19,7 @@
     "\n",
     "import rdflib\n",
     "from rdflib import Graph\n",
-    "from data.data import CollectionAccessor, ImageHandler, get_latest\n",
+    "from data.data import CollectionAccessor, ImageHandler\n",
     "\n",
     "from search import Search, Randomiser"
    ]
@@ -36,35 +27,26 @@
   {
    "cell_type": "code",
    "execution_count": 2,
-   "id": "b4d8dbd3-411d-4ccd-a848-9ae8c2d277b4",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "\n",
-    "# dmg_meta = dict(name=\"DMG 2025-04-03\", id_=\"DMG_2025-04-03\",\n",
-    "#                 creation_timestamp=\"2025-04-03\")\n",
-    "# # dmg = CollectionAccessor.get_DMG(\"./data/DMG_2025-03-26.csv\", \"\", **dmg_meta)\n",
-    "# image_folder = \"./data/images/DMG\"\n",
-    "# img = ImageHandler(image_folder=image_folder)\n",
-    "\n",
-    "# dmg = CollectionAccessor.get_DMG(pub_path=\"./data/dumps/API_dump_public_2025-04-03_extracted.csv\",\n",
-    "#                                  priv_path=\"./data/dumps/API_dump_private_2025-04-03_extracted.csv\",\n",
-    "#                                  rights_path=\"./data/rights.csv\",\n",
-    "#                                  image_handler=img,\n",
-    "#                                  **dmg_meta)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
    "id": "9ffdd5f1-ed95-47d2-9cbd-6fa5e29d4858",
-   "metadata": {},
+   "metadata": {
+    "scrolled": true
+   },
    "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "image paths loaded...\n",
+      "./data/dumps/API_dump_public_2025-05-13.json ./data/dumps/API_dump_private_2025-05-13.json\n",
+      "./data/dumps/API_dump_public_2025-05-13.json ./data/dumps/API_dump_private_2025-05-13.json\n",
+      "('2025-05-13', './data/dumps/API_dump_public_2025-05-13_extracted.csv', './data/dumps/API_dump_private_2025-05-13_extracted.csv')\n"
+     ]
+    },
     {
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "100%|█████████████████████████████████████████████████████████████████████| 36458/36458 [00:00<00:00, 486635.42it/s]\n"
+      "100%|████████████████████████████████| 24824/24824 [00:36<00:00, 677.21it/s]\n"
      ]
     }
    ],
@@ -72,17 +54,22 @@
     "def init_DMG():\n",
     "    image_folder = \"./data/images/DMG\"\n",
     "    image_handler = ImageHandler(image_folder=image_folder, keep_prefix=False)\n",
+    "    print(\"image paths loaded...\")\n",
+    "\n",
+    "    time_stamp, pub_file, priv_file = CollectionAccessor.get_latest_dump(\"./data/dumps\")\n",
+    "    print(CollectionAccessor.get_latest_dump(\"./data/dumps\"))\n",
     "\n",
-    "    dmg_meta = dict(name=\"Design Museum Gent (public & private)\", id_=\"DMG_2025-05-06\",\n",
-    "                creation_timestamp=\"2025-05-06\")\n",
-    "    df = CollectionAccessor.get_DMG(pub_path=get_latest(\"./data/dumps\", contains=\"public\"),\n",
-    "                                     priv_path=get_latest(\"./data/dumps\", contains=\"private\"),\n",
+    "    \n",
+    "    dmg_meta = dict(name=\"Design Museum Gent (public & private)\", id_=\"DMG_\"+time_stamp,\n",
+    "                creation_timestamp=time_stamp)\n",
+    "    df = CollectionAccessor.get_DMG(pub_path=pub_file, #get_latest(\"./data/dumps\", contains=\"public\"),\n",
+    "                                     priv_path=priv_file, #get_latest(\"./data/dumps\", contains=\"private\"),\n",
     "                                     rights_path=\"./data/rights.csv\",\n",
     "                                     image_handler=image_handler,\n",
     "                                     **dmg_meta)\n",
     "    \n",
-    "    rand = Randomiser(df, name=\"R1\")\n",
-    "    rand2 = Randomiser(df, name=\"R2\")\n",
+    "    rand = Randomiser(df, name=\"Randomiser\")\n",
+    "    rand2 = Randomiser(df, name=\"Randomiser\")\n",
     "    s = Search([rand, rand2])\n",
     "    return image_handler, df, s\n",
     "\n",
@@ -91,143 +78,46 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
-   "id": "99a4c890-f3a3-42e0-bbe6-8081d026d489",
+   "execution_count": 20,
+   "id": "897d462b-77f9-4a0b-b4fc-39414221775f",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "recs = dmg.sample(4)\n",
+    "searcher_ids = [s.id for s in dmg_search.searchers[:1]]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 24,
+   "id": "352611dd-8baf-4d89-a75f-c0a5c86f312f",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "[{'inventory_number': '2017-0314_2-5',\n",
-       "  'title': \"Hulpstuk van het massageapparaat '77I'\",\n",
-       "  'description': 'Het lichtblauwe massageapparaat van Nova werd geleverd met drie hulpstukken, waaronder deze trilplaat met noppen voor de behandeling van cellulitis. In de jaren 1960 kregen gezondheid, welzijn en uiterlijke schoonheid meer en meer aandacht. Een slanke taille, lange benen en een weelderige boezem wer …',\n",
-       "  'designer': '',\n",
-       "  'producer': 'Nova',\n",
-       "  'design_date': '',\n",
-       "  'production_date': 'na ca. 1972',\n",
-       "  'design_place': '',\n",
-       "  'production_place': 'Tongeren',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/2017-0314_0-5/2017-0314_2-5$1.jpg'},\n",
-       " {'inventory_number': '2017-0314_2-5',\n",
-       "  'title': \"Hulpstuk van het massageapparaat '77I'\",\n",
-       "  'description': 'Het lichtblauwe massageapparaat van Nova werd geleverd met drie hulpstukken, waaronder deze trilplaat met noppen voor de behandeling van cellulitis. In de jaren 1960 kregen gezondheid, welzijn en uiterlijke schoonheid meer en meer aandacht. Een slanke taille, lange benen en een weelderige boezem wer …',\n",
-       "  'designer': '',\n",
-       "  'producer': 'Nova',\n",
-       "  'design_date': '',\n",
-       "  'production_date': 'na ca. 1972',\n",
-       "  'design_place': '',\n",
-       "  'production_place': 'Tongeren',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/2017-0314_0-5/2017-0314_2-5$2.jpg'},\n",
-       " {'inventory_number': '4717_4-6',\n",
-       "  'title': '',\n",
-       "  'description': 'elastische banden',\n",
-       "  'designer': 'Janine Kleykens',\n",
-       "  'producer': 'Marcel Liebaert',\n",
-       "  'design_date': '',\n",
-       "  'production_date': 'na 1984',\n",
-       "  'design_place': '',\n",
-       "  'production_place': '',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/4717_0-6/4717_4-6.JPG'},\n",
-       " {'inventory_number': '2001-0086',\n",
-       "  'title': '',\n",
-       "  'description': 'geheel= potje (1.2) + deksel (2.2) - pillendoosje in bakkeliet',\n",
-       "  'designer': '',\n",
-       "  'producer': '',\n",
-       "  'design_date': '',\n",
-       "  'production_date': '1900 — 1999',\n",
-       "  'design_place': '',\n",
-       "  'production_place': '',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/2001-0086/2001-0086$1.JPG'},\n",
-       " {'inventory_number': '2001-0086',\n",
-       "  'title': '',\n",
-       "  'description': 'geheel= potje (1.2) + deksel (2.2) - pillendoosje in bakkeliet',\n",
-       "  'designer': '',\n",
-       "  'producer': '',\n",
-       "  'design_date': '',\n",
-       "  'production_date': '1900 — 1999',\n",
-       "  'design_place': '',\n",
-       "  'production_place': '',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/2001-0086/2001-0086.JPG'},\n",
-       " {'inventory_number': '2001-0086',\n",
-       "  'title': '',\n",
-       "  'description': 'geheel= potje (1.2) + deksel (2.2) - pillendoosje in bakkeliet',\n",
-       "  'designer': '',\n",
-       "  'producer': '',\n",
-       "  'design_date': '',\n",
-       "  'production_date': '1900 — 1999',\n",
-       "  'design_place': '',\n",
-       "  'production_place': '',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/2001-0086/2001-0086$2.JPG'},\n",
-       " {'inventory_number': '3293',\n",
-       "  'title': 'Paneel met druivenrank',\n",
-       "  'description': 'Massief paneel met druivenrank. Aan een van de randen van een lange zijde werden vijf gaten gemaakt.',\n",
-       "  'designer': 'onbekend',\n",
-       "  'producer': '',\n",
-       "  'design_date': '',\n",
-       "  'production_date': '1450 — 1550',\n",
-       "  'design_place': '',\n",
-       "  'production_place': '',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/3293/3293.JPG'},\n",
-       " {'inventory_number': '3293',\n",
-       "  'title': 'Paneel met druivenrank',\n",
-       "  'description': 'Massief paneel met druivenrank. Aan een van de randen van een lange zijde werden vijf gaten gemaakt.',\n",
-       "  'designer': 'onbekend',\n",
-       "  'producer': '',\n",
-       "  'design_date': '',\n",
-       "  'production_date': '1450 — 1550',\n",
-       "  'design_place': '',\n",
-       "  'production_place': '',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/3293/3293$1.jpg'},\n",
-       " {'inventory_number': '3293',\n",
-       "  'title': 'Paneel met druivenrank',\n",
-       "  'description': 'Massief paneel met druivenrank. Aan een van de randen van een lange zijde werden vijf gaten gemaakt.',\n",
-       "  'designer': 'onbekend',\n",
-       "  'producer': '',\n",
-       "  'design_date': '',\n",
-       "  'production_date': '1450 — 1550',\n",
-       "  'design_place': '',\n",
-       "  'production_place': '',\n",
-       "  'rights_attribution': 'In Copyright',\n",
-       "  'image_path': '/3293/3293$2.jpg'}]"
+       "object_number\n",
+       "1992-0004_0-2    0.776923\n",
+       "1992-0004_1-2    0.357817\n",
+       "1992-0004_2-2    0.667643\n",
+       "4521             0.466348\n",
+       "5051             0.770696\n",
+       "                   ...   \n",
+       "2022-0028        0.341355\n",
+       "2022-0025_0-3    0.363114\n",
+       "2022-0025_1-3    0.415226\n",
+       "2022-0025_2-3    0.771660\n",
+       "2022-0025_3-3    0.559759\n",
+       "Length: 24824, dtype: float64"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 24,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "dmg.coll.get_presentation_records(object_numbers=list(dmg.sample(4).index))\n",
-    "# for i, r in sub.iterrows():\n",
-    "#     r.image_path"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "c89d7709-8922-4051-bb7d-6493ebbbaed0",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "dmg.image_path.isna().sum()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "710fcbeb-9ce7-4b97-8d27-ed6f2feb31a3",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "dmg[\"objectname_label\"]"
+    "dmg_search(recs, searcher_ids=searcher_ids)"
    ]
   },
   {
@@ -239,20 +129,6 @@
     "# DEV FUNCTIONS"
    ]
   },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "c515e93e-1760-4cbe-bfdf-f35c6c9bd5d2",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def parse_id_list(id_list_str):\n",
-    "    try:\n",
-    "        return list(map(str.strip, id_list_str.split(\",\")))\n",
-    "    except ValueError:\n",
-    "        raise s"
-   ]
-  },
   {
    "cell_type": "code",
    "execution_count": null,
@@ -292,6 +168,16 @@
     "# searcher_scores.round(3)"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "8564463e-e157-4e54-a6ca-7fcee8b8af82",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "dmg.coll.filter(\"doos\")"
+   ]
+  },
   {
    "cell_type": "markdown",
    "id": "c9c6c6b7-1f72-4436-8e5d-7616b36664e6",
@@ -318,7 +204,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "!curl \"http://0.0.0.0:8080/DMG_2025-05-06\""
+    "!curl \"http://0.0.0.0:8080/DMG_2025-05-13\""
    ]
   },
   {
@@ -328,7 +214,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "!curl \"http://0.0.0.0:8080/DMG_2025-05-06/object-details?object_ids=1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\""
+    "!curl \"http://0.0.0.0:8080/DMG_2025-05-13/object-details?object_ids=1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\""
    ]
   },
   {
@@ -338,7 +224,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "!curl \"http://0.0.0.0:8080/DMG_2025-05-06/models\""
+    "!curl \"http://0.0.0.0:8080/DMG_2025-05-13/models\""
    ]
   },
   {
@@ -361,7 +247,7 @@
    "outputs": [],
    "source": [
     "# default params for search\n",
-    "!curl \"http://0.0.0.0:8080/DMG_2025-05-06/search\""
+    "!curl \"http://0.0.0.0:8080/DMG_2025-05-13/search\""
    ]
   },
   {
@@ -373,7 +259,7 @@
    },
    "outputs": [],
    "source": [
-    "!curl \"http://0.0.0.0:8080/DMG_2025-05-06/search?object_ids=\"1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\"&concept=\"hello\"&model_list=\"a,b\"\""
+    "!curl \"http://0.0.0.0:8080/DMG_2025-05-13/search?object_ids=\"1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\"&concept=\"hello\"&model_list=\"a,b\"\""
    ]
   },
   {
@@ -383,7 +269,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "!curl \"http://0.0.0.0:8080/DMG_2025-05-06/search/order?object_ids=\"1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\"&concept=\"hello\"&model_list=\"a,b\"&skip=200&limit=100&reverse=true\""
+    "!curl \"http://0.0.0.0:8080/DMG_2025-05-13/search/order?object_ids=\"1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\"&concept=\"hello\"&model_list=\"a,b\"&skip=200&limit=100&reverse=true\""
    ]
   },
   {
@@ -393,7 +279,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "!curl \"http://0.0.0.0:8080/DMG_2025-05-06/search/sample?object_ids=\"1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\"&concept=\"hello\"&model_list=\"a,b\"&k=100\""
+    "!curl \"http://0.0.0.0:8080/DMG_2025-05-13/search/sample?object_ids=\"1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\"&concept=\"hello\"&model_list=\"a,b\"&k=12\""
    ]
   },
   {
@@ -403,16 +289,34 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "!curl \"http://0.0.0.0:8080/DMG_2025-05-06/search/order/filter?object_ids=\"1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\"&concept=\"hello\"&model_list=\"a,b\"&filter_text=\"doos\"\""
+    "!curl \"http://0.0.0.0:8080/DMG_2025-05-13/search/order/filter?object_ids=\"1987-0120_04-14,1987-1343_2-4,3370,3703_0-2\"&concept=\"hello\"&model_list=\"a,b\"&filter_text=\"doos\"&skip=200&limit=100\""
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "a08923e8-064b-46c2-b365-b94125247f15",
+   "metadata": {},
+   "source": [
+    "---"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "02b8f761-ea09-49b8-bc12-8128e11214af",
+   "id": "1d5aeeb6-a45d-44e2-90e8-299814dc5ad4",
    "metadata": {},
    "outputs": [],
-   "source": []
+   "source": [
+    "import requests as rq\n",
+    "base = \"http://0.0.0.0:8080/\"\n",
+    "path = \"moon\"\n",
+    "for d in range(10, 30):\n",
+    "    q = dict(ISO_8601_datetime=f\"2024-05-{d}\", lat_long_degrees=\"51.05,3.71\")\n",
+    "    print(q)\n",
+    "    resp = rq.get(base+path, params=q)\n",
+    "    \n",
+    "    print(resp.json())"
+   ]
   }
  ],
  "metadata": {
diff --git a/requirements.txt b/requirements.txt
index 41ba787..8f152d4 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -4,6 +4,7 @@ fastapi==0.115.12
 imageio==2.35.1
 matplotlib==3.10.3
 networkx==3.3
+numpy
 pandas==2.2.3
 pathvalidate==3.2.3
 rdflib==7.1.4
diff --git a/search.py b/search.py
index c6546e3..ede5159 100644
--- a/search.py
+++ b/search.py
@@ -16,8 +16,9 @@ import imageio.v3 as iio
 # from PIL import Image
 
 
-import torch
-from sentence_transformers import util
+# import torch
+# from sentence_transformers import SentenceTransformer, util
+
 
 from collections import Counter
 import networkx as nx
@@ -30,18 +31,35 @@ class Search:
         self.cur_recs = None
         self.cur_scores = None
 
-    def store_search(self, recs, scores):
+    def cache_search(self, recs, searcher_ids, scores):
         self.cur_recs = recs
+        self.cur_searcher_ids = searcher_ids
         self.cur_scores = scores
+
+    def get_cached_search(self, recs, searcher_ids):
+        if recs.equals(self.cur_recs) and (searcher_ids == self.cur_searcher_ids):
+            return self.cur_scores
+        return None
     
-    def __call__(self, recs, coll=None, return_df=False):
+    def __call__(self, recs, searcher_ids=None, return_df=False):
+        cached_scores = self.get_cached_search(recs, searcher_ids)
+        if cached_scores is not None: return cached_scores
+        
+        if searcher_ids is not None:
+            if len(searcher_ids) < 1:
+                raise ValueError("Searching with no searcher (aka model) not defined! (This logic is implemented externally.)")
+            else:
+                cur_searchers = [s for s in self.searchers for s_id in searcher_ids if id(s) == s_id]
+        else:
+            cur_searchers = self.searchers
+            
         searcher_scores = [s(recs) for s in self.searchers]
         searcher_scores = pd.DataFrame({s.name: s for s in searcher_scores})
         searcher_scores.loc[recs.index] = 0.
         
         merged_scores = self.merge_scores(searcher_scores)        
 
-        self.store_search(recs, merged_scores)
+        self.cache_search(recs, searcher_ids, merged_scores)
         
         if return_df:
             searcher_scores["avg"] = merged_scores
@@ -73,10 +91,19 @@ class Search:
             return coll.iloc[sort_idx].iloc[::-1]
         return coll.iloc[sort_idx]
 
+    
 class Searcher:
+    serial_number = 0
     def __init__(self, name):
         self.name = name
 
+        self.id = name + str(Searcher.serial_number)
+        Searcher.serial_number += 1
+
+    def __id__(self):
+        print("HELLO", self)
+        return self.id
+
 
 class Randomiser(Searcher):
     def __init__(self, coll, name="Randomiser"):
@@ -84,7 +111,7 @@ class Randomiser(Searcher):
         self.index = coll.index
 
     def __call__(self, records):
-        rand_scores = pd.Series(rand.random(size=len(self.index)), index=self.index, name=self.name)
+        rand_scores = pd.Series(rand.random(size=len(self.index)), index=self.index, name=self.id)
         return rand_scores
 
 
@@ -121,7 +148,7 @@ class GraphSearcher(Searcher):
         dists = [nx.shortest_path_length(self.G, source=objnum, target=None) for objnum in records.index]
 
         raw_scores = pd.Series([np.mean([(d[obj_num] if obj_num in d else 10) for d in dists]) for obj_num in self.obj_nodes], 
-                       index=self.obj_nodes, name=self.name)
+                       index=self.obj_nodes, name=self.id)
         return self.dist2sim(raw_scores)
 
     @staticmethod
@@ -211,7 +238,6 @@ class EmbeddingSearcher(Searcher):
 
 
 
-from sentence_transformers import SentenceTransformer#, util
 
 class TextEmbeddingSearcher(EmbeddingSearcher):
     def __init__(self, space_df, sim_func=None, norm_scores=True, name="TextEmbeddingSeacher"):
@@ -220,6 +246,6 @@ class TextEmbeddingSearcher(EmbeddingSearcher):
         
     def __call__(self, text):
         vec = self.embedder.encode(text)
-        return pd.Series(self.rank_vector(vec), index=self.space.index, name=self.name)
+        return pd.Series(self.rank_vector(vec), index=self.space.index, name=self.id)
 
   
\ No newline at end of file
